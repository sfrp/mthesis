import Base
import Base.AVR.ATMEGA8.GPIO as IO
import Base.AVR.ATMEGA8.Timer as Timer

type Time = Time(Int, Int)
type State = Strike | Tick(Time) | Wait(Time)

@state init Wait(Time(0, 0)) : State =
  let event = (IO.@posEdgePB0, IO.@posEdgePB1,
               IO.@posEdgePB2, IO.@pinB0 && IO.@pinB1)
  in case @@state of
    Strike -> case event of
      (_, _, True, _) -> Wait(Time(0, 0))
      _ -> Strike
    Tick(Time(0, 0)) -> Strike
    Tick(restTime) -> case event of
      (_, _, True, _) -> Wait(restTime)
      _ -> Tick(countdown(restTime, Timer.@dsec))
    Wait(Time(min, sec) as time) -> case event of
      (True, _, _, _) -> Wait(Time((min + 1) % 100, sec))
      (_, True, _, _) -> Wait(Time(min, (sec + 1) % 60))
      (_, _, True, _) -> case time of
        Time(0, 0) -> Wait(time)
        _ -> Tick(time)
      (_, _, _, True) -> Wait(Time(0, 0))
      _ -> Wait(time)

@dynamicPos init 0 = (@@dynamicPos + 1) % 4

countdown(time : Time, dsec : Int) : Time = Time(x/60, x%60)
  where Time(min, sec) = time
        x = (min*60+sec)-dsec

segPat(x : Int) : Int = case x of
  0 -> 0b01111110; 1 -> 0b00010010; 2 -> 0b01011101
  3 -> 0b01010111; 4 -> 0b00110011; 5 -> 0b01100111
  6 -> 0b01101111; 7 -> 0b01010010; 8 -> 0b01111111
  9 -> 0b01110111; _ -> 0b00000001

chooseDigit(time : Time, pos : Int) : Int =
  let Time(min, sec) = time in case pos of
    0 -> min/10; 1 -> min%10; 2 -> sec/10; _ -> sec%10

out IO.$portB(6, case @state of Strike -> False; _ -> True)
out $displayDigit(@state, @dynamicPos)

$displayDigit(state, pos) =
  IO.$portCs((1 << pos) ^ 0b00001111) >-> case state of
    Strike -> IO.$portDs(segPat(0))
    Wait(time) -> IO.$portDs(segPat(chooseDigit(time, pos)))
    Tick(time) -> IO.$portDs(segPat(chooseDigit(time, pos)))
